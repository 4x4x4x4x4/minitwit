input {
  beats {
    port => 5044
  }
}

filter {
  # First grok pattern
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}" }
    tag_on_failure => ["_grokparsefailure_timestamp"]
  }

  date {
    match => [ "timestamp", "ISO8601" ]
  }

  # Second grok pattern
  grok {
    match => { 
      "message" => "%{WORD:log_level}:%{WORD:logger}:%{IP:client_ip} - - \[%{NUMBER:day}/%{WORD:month}/%{NUMBER:year} %{TIME:time}\] \"%{WORD:http_method} %{URIPATHPARAM:path} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code}(?: -)?" 
    }
    tag_on_failure => ["_grokparsefailure_http"]
  }

  if "_grokparsefailure_http" not in [tags] {
    mutate {
      add_field => {
        "extracted_message" => "Method: %{http_method}, Path: %{path}, Response: %{response_code}"
      }
    }
  } else {
    mutate {
      add_tag => ["_grokparsefailure_http"]
    }
  }
}

output {
  if "logstash_internal" in [user] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      user => "logstash_internal"
      password => 'changeme'
    }
  } else {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "ruby-logs-%{+YYYY.MM.dd}"
      user => "elastic"
      password => 'changeme'
    }
  }
}
